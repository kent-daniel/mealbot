name: 🐳 Build Image and Push to Artifact Registry

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  WIF_PROVIDER: ${{vars.WIF_PROVIDER}}
  GCP_REGION: ${{vars.GCP_REGION}}
  PROJECT_ID: ${{vars.PROJECT_ID}}
  ACTIONS_SA_EMAIL: ${{vars.ACTIONS_SA_EMAIL}}
  CLOUDRUN_SA_EMAIL: ${{vars.CLOUD_RUN_SA}}
  ARTIFACT_REGISTRY_PATH: gcr.io/${{ vars.PROJECT_ID }}
  TF_BUCKET: ${{vars.TF_BUCKET}}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Cloud Auth
        id: "auth"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.ACTIONS_SA_EMAIL }}
          token_format: "access_token"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker gcr.io

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./discord-bot
          push: true
          tags: "${{ env.ARTIFACT_REGISTRY_PATH }}/mealbot-discord-bot:${{ github.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image URI output
        id: image_push # This step now handles setting the output
        run: |
          IMAGE_URI="${{ env.ARTIFACT_REGISTRY_PATH }}/mealbot-discord-bot:${{ github.sha }}"
          echo "image_uri=${IMAGE_URI}" >> "$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: cd terraform && terraform init -backend-config bucket=${{ env.TF_BUCKET }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: cd terraform && terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd terraform && terraform plan \
            -var cloud_run_image_uri="${{ steps.image_push.outputs.image_uri }}" \
            -var project_id=${{env.PROJECT_ID}} \
            -var cloud_run_service_account=${{env.CLOUDRUN_SA_EMAIL}} \
            -var tf_state_bucket=${{env.TF_BUCKET}} \
            -out "prod.tfplan"

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: cd terraform && terraform apply "prod.tfplan"
